pipeline {
    agent any

    environment {
        MYSQL_USER = 'myuser'
        MYSQL_PASSWORD = 'mypassword'
        MYSQL_DATABASE = 'mydatabase'
        MYSQL_HOST = 'mysql-db'
        MYSQL_PORT = '3310'
        REDIS_HOST = 'redis'
        REDIS_PORT = '6379'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    // Construir a aplicação Flask
                    docker.build("flask-app", "-f aplicacao/Dockerfile .")
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Subir os serviços definidos no docker-compose
                    sh 'docker-compose up -d'

                    // Aguardar até que o MySQL e o Redis estejam prontos
                    sh 'docker-compose exec flask-app wait-for-it.sh mysql-db:3306 --timeout=60 --strict -- echo "MySQL is up"'
                    sh 'docker-compose exec flask-app wait-for-it.sh redis:6379 --timeout=60 --strict -- echo "Redis is up"'
                }
            }
        }

        stage('Database Setup') {
            steps {
                script {
                    // Executar as migrações no contêiner da aplicação Flask
                    try {
                        sh 'docker-compose exec flask-app flask db upgrade'
                    } catch (Exception e) {
                        echo "Erro durante a execução do Database Setup: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Erro durante a execução do Database Setup"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Executar testes no contêiner da aplicação Flask
                    try {
                        sh 'docker-compose exec flask-app pytest tests'
                    } catch (Exception e) {
                        echo "Erro durante a execução dos testes: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Erro durante a execução dos testes"
                    }
                }
            }
        }

        stage('Notifications') {
            steps {
                script {
                    echo 'Sending Notifications...'

                    // Enviar e-mail em caso de falha
                    def emailSubject = 'Build Failed'
                    def emailBody = 'O build falhou. Verifique a console de build para mais detalhes.'
                    def emailAddress = 'luca.felipe@ges.inatel.br'

                    if (currentBuild.result == 'FAILURE') {
                        echo 'Build falhou, enviando e-mail de notificação.'
                        emailext subject: emailSubject, body: emailBody, to: emailAddress
                    } else {
                        echo 'Build bem-sucedido, nenhum e-mail enviado.'
                    }
                }
            }
        }
    }

    post {
        always {
            // Limpar os contêineres e volumes após a execução
            sh 'docker-compose down -v'
        }
    }
}
