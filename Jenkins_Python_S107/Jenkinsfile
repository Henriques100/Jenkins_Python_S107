pipeline {
    agent {
        docker {
            image 'python:3.9-slim'
        }
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Construir a imagem Docker usando o Dockerfile do Flask
                    def dockerImage = docker.build('s107:latest', '-f Dockerfile .')

                    // Executar o contêiner Docker com a aplicação Flask
                    dockerImage.run('-v $PWD:/flask --name flask-app')

                    // Executar os testes
                    dockerImage.inside('-v $PWD:/flask') {
                        sh 'venv/bin/python3 -m pytest'
                    }

                    // Limpar o contêiner após os testes
                    sh 'docker rm -f flask-app'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh 'echo "Testing..."'
                    sh 'python -m pip install --upgrade pip'
                    sh 'pip install asgiref greenlet python-dotenv'
                    sh 'cd Jenkins_Python_S107/flask'
                    sh 'pytest'
                    archiveArtifacts 'Jenkins_Python_S107/flask/flash/tests'
                }
            }
        }

        stage('Notifications') {
            steps {
                script {
                    sh 'echo "Notificação"'
                    sh 'echo "Enviando e-mail para luca.felipe@ges.inatel.br..."'
                    sh 'echo "Enviando mensagem para o canal Slack..."'
                }
            }
        }
    }

    post {
        failure {
            emailext subject: 'Build Failed',
                      body: 'O build falhou. Veja a console de build para mais detalhes.',
                      to: 'luca.felipe@ges.inatel.br'
        }
    }
}
